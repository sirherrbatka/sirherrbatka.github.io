#+TITLE:       design of cl-data-structures aggregation protocol
#+AUTHOR:
#+EMAIL:       shka@tuxls
#+DATE:        2019-02-02 sob
#+URI:         /blog/%y/%m/%d/design-of-cl-data-structures-aggregation-protocol
#+KEYWORDS:    lisp, CLOS, object orientation
#+TAGS:        lisp, CLOS, object orientation
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Mindset and reasoning behind cl-data-structures aggregation protocol.
* Background
The very first post I have published on this blog was describing what are cl-data-structures ranges. In this post I want to show how introduction of ranges allows to build universal aggregation functions on top of them.

* What is aggregation function?
It is not so different from the SQL, really. Pretty much everything that is supposed to transform whole range of the values into single result can be considered to be any aggregation function so here comes your MAX, MIN, AVERAGE and so one. The usefullness of such functions shouldn't need explenation, but some of the design considerations are less obvious. First of it is important to note that aggregation functions don't have to work in the very same way on every data. SQL statement "select baz, MAX(foo) from bar GROUP BY baz" is a classical example demonstraiting this angle, but it is worth noting that idea can go further than that.

Statistical bootstraping is procedure of obtaining approximated estimator from distribution by sampling. Usual reason to do so is high (time and/or memory) complexity of calculation which would render procedure inpractical for large sets. Boostrapping procedure is usually somewhat independent from the specifics of the estimator, therefore it makes sense to have a way to establish boostrapping not in the aggregator itself, but allow boostrapping to use specific aggregator instead.

Next, we need to consider specific situations where aggregation can be terminated early, for instance because FIND function has found a specific value required number of times.

Finally, some aggregation functions require more then just one step. Examples can include statistical moments
